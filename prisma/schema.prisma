generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  reader
  contributor
  editor
  admin
}

enum MediaKind {
  image
  video
}

enum SubmissionStatus {
  pending
  approved
  rejected
}

enum PostType {
  Music
  Promotional
  Funny
  Other
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(reader)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  submissions   Submission[]   @relation("SubmitterSubmissions")
  reactions     Reaction[]
  auditLogs     AuditLog[]     @relation("UserAuditLogs")
  comments      Comment[]
  authorProfile AuthorProfile?
  watchlists    Watchlist[]
  portfolios    Portfolio[]
  alerts        Alert[]
  analysis      Analysis[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model MediaAsset {
  id        String    @id @default(cuid())
  kind      MediaKind
  provider  String
  publicId  String
  width     Int?
  height    Int?
  duration  Float?
  blurhash  String?
  sourceUrl String?
  post      Post?     @relation(fields: [postId], references: [id])
  postId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id           String        @id @default(cuid())
  slug         String        @unique
  title        String
  description  String?
  type         PostType
  country      String?
  author       User?         @relation(fields: [authorId], references: [id])
  authorId     String?
  category     Category?     @relation(fields: [categoryId], references: [id])
  categoryId   String?
  tags         PostTag[]
  media        MediaAsset[]
  submission   Submission?
  status       String        @default("draft")
  publishedAt  DateTime?
  views        Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  reactions    Reaction[]
  comments     Comment[]
  viewEvents   ViewEvent[]
  embedding    Embedding?
}

model Submission {
  id               String           @id @default(cuid())
  post             Post?            @relation(fields: [postId], references: [id])
  postId           String?          @unique
  status           SubmissionStatus @default(pending)
  licenseAccepted  Boolean
  ageRestricted    Boolean          @default(false)
  notes            String?
  submitter        User             @relation("SubmitterSubmissions", fields: [submitterId], references: [id])
  submitterId      String
  externalUrl      String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Reaction {
  id        String   @id @default(cuid())
  type      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterSubscriber {
  id                 String   @id @default(cuid())
  email              String   @unique
  verified           Boolean  @default(false)
  verificationToken  String?
  subscribedAt       DateTime @default(now())
  unsubscribedAt     DateTime?
}

model AuditLog {
  id        String   @id @default(cuid())
  actor     User?    @relation("UserAuditLogs", fields: [actorId], references: [id])
  actorId   String?
  action    String
  entity    String
  entityId  String?
  data      Json?
  createdAt DateTime @default(now())
}

model ViewEvent {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  ipHash    String
  userAgent String?
  createdAt DateTime @default(now())
  @@index([postId, createdAt])
}

// Vector embedding stub; swap to pgvector later
model Embedding {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @unique
  // store as numeric array for now; migrate to pgvector when available
  values    Decimal[]
  createdAt DateTime @default(now())
}

model Setting {
  key   String @id
  value String
}

model Theme {
  id         String   @id
  name       String
  cssFile    String   // path under /public/themes, e.g. "casper.css"
  fontsHref  String?  // optional Google Fonts href
  createdAt  DateTime @default(now())
}

model Topic {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  NewsItem    NewsItem[]
}

model NewsItem {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String?
  contentHtml String
  topicSlug   String
  sourceName  String
  sourceUrl   String   @unique
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topic       Topic    @relation(fields: [topicSlug], references: [slug])

  @@index([topicSlug, publishedAt])
}

model IngestItem {
  id                   String   @id @default(cuid())
  sourceName           String
  sourceUrl            String   @unique
  publishedAt          DateTime
  title                String
  excerpt              String?
  contentHtmlSummary   String
  topic                String
  tagsJson             Json?
  citationsJson        Json?
  createdAt            DateTime @default(now())
}

model AuthorProfile {
  userId       String  @id
  bio          String?
  credentials  Json?
  socialLinks  Json?
  headshotUrl  String?
  user         User    @relation(fields: [userId], references: [id])
}

model Glossary {
  id           String   @id @default(cuid())
  term         String   @unique
  slug         String   @unique
  definition   String
  examplesJson Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// FINANCIAL MARKET DATA MODELS - Investing.com Style Features

enum AssetType {
  stock
  index
  forex
  crypto
  commodity
  bond
  etf
  future
  option
}

enum MarketStatus {
  open
  closed
  pre_market
  after_hours
  weekend
}

model Market {
  id           String       @id @default(cuid())
  name         String       // NYSE, NASDAQ, LSE, etc.
  code         String       @unique // NYSE, NASD, LSE
  country      String       // US, UK, CA, etc.
  timezone     String       // America/New_York
  currency     String       // USD, GBP, CAD
  status       MarketStatus @default(closed)
  openTime     String?      // "09:30"
  closeTime    String?      // "16:00"
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assets       Asset[]
}

model Asset {
  id           String    @id @default(cuid())
  symbol       String    @unique // AAPL, EURUSD, BTC, etc.
  name         String    // Apple Inc, Euro vs US Dollar
  type         AssetType
  market       Market    @relation(fields: [marketId], references: [id])
  marketId     String
  sector       String?   // Technology, Healthcare, etc.
  industry     String?   // Software, Pharmaceuticals, etc.
  description  String?
  website      String?
  logoUrl      String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  quotes       Quote[]
  watchlists   WatchlistItem[]
  analysis     Analysis[]
  earnings     EarningsReport[]
  holdings     PortfolioHolding[]
  alerts       Alert[]
  
  @@index([type, isActive])
  @@index([marketId, isActive])
}

model Quote {
  id             String   @id @default(cuid())
  asset          Asset    @relation(fields: [assetId], references: [id])
  assetId        String
  price          Decimal
  previousClose  Decimal?
  change         Decimal?
  changePercent  Decimal?
  volume         BigInt?
  marketCap      BigInt?
  high52Week     Decimal?
  low52Week      Decimal?
  dayHigh        Decimal?
  dayLow         Decimal?
  bid            Decimal?
  ask            Decimal?
  pe             Decimal?
  eps            Decimal?
  dividend       Decimal?
  dividendYield  Decimal?
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  
  @@index([assetId, timestamp])
  @@index([timestamp])
}

model Watchlist {
  id        String          @id @default(cuid())
  name      String
  user      User?           @relation(fields: [userId], references: [id])
  userId    String?
  isDefault Boolean         @default(false)
  isPublic  Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  items     WatchlistItem[]
  
  @@index([userId, isDefault])
}

model WatchlistItem {
  id          String    @id @default(cuid())
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  watchlistId String
  asset       Asset     @relation(fields: [assetId], references: [id])
  assetId     String
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  
  @@unique([watchlistId, assetId])
  @@index([watchlistId, order])
}

model EconomicEvent {
  id          String   @id @default(cuid())
  country     String
  currency    String
  title       String
  description String?
  impact      String   // high, medium, low
  category    String   // Employment, Inflation, GDP, etc.
  actual      String?
  forecast    String?
  previous    String?
  unit        String?  // %, billions, thousands, etc.
  eventTime   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([eventTime])
  @@index([country, eventTime])
  @@index([impact, eventTime])
}

model Analysis {
  id          String    @id @default(cuid())
  asset       Asset?    @relation(fields: [assetId], references: [id])
  assetId     String?
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  title       String
  summary     String
  content     String    @db.Text
  rating      String?   // buy, hold, sell, strong_buy, strong_sell
  targetPrice Decimal?
  timeframe   String?   // short_term, medium_term, long_term
  tags        String[]  // technical, fundamental, earnings, etc.
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([assetId, publishedAt])
  @@index([authorId, publishedAt])
  @@index([rating, publishedAt])
}

model EarningsReport {
  id              String   @id @default(cuid())
  asset           Asset    @relation(fields: [assetId], references: [id])
  assetId         String
  quarter         String   // Q1 2024, Q2 2024, etc.
  fiscalYear      Int
  reportDate      DateTime
  revenue         Decimal?
  revenueExpected Decimal?
  eps             Decimal?
  epsExpected     Decimal?
  guidance        String?
  summary         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([assetId, quarter, fiscalYear])
  @@index([reportDate])
  @@index([assetId, reportDate])
}

model Portfolio {
  id          String           @id @default(cuid())
  name        String
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  totalValue  Decimal          @default(0)
  totalCost   Decimal          @default(0)
  isDefault   Boolean          @default(false)
  isPublic    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  holdings    PortfolioHolding[]
  
  @@index([userId, isDefault])
}

model PortfolioHolding {
  id          String    @id @default(cuid())
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId String
  asset       Asset     @relation(fields: [assetId], references: [id])
  assetId     String
  quantity    Decimal
  avgCost     Decimal
  currentValue Decimal  @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([portfolioId, assetId])
  @@index([portfolioId, updatedAt])
}

model Alert {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String
  type      String   // price_above, price_below, change_percent, volume
  value     Decimal
  isActive  Boolean  @default(true)
  triggered Boolean  @default(false)
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, isActive])
  @@index([assetId, isActive])
}
